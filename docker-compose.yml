services:
  fastapi:
    build:
      context: ./fastapi
      dockerfile: Dockerfile
    container_name: fastapi
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      - redis
      - minio
      - rabbitmq
    volumes:
      - ./fastapi:/app
      - ./db:/app/db
    networks:
      - net

  djangocore:
    build:
      context: ./djangocore
      dockerfile: Dockerfile
    container_name: djangocore
    ports:
      - "8001:8001"
    env_file:
      - .env
    depends_on:
      - redis
      - minio
      - rabbitmq
    volumes:
      - ./djangocore:/app
      - ./db:/app/db
    networks:
      - net

  djangorest:
    build:
      context: ./djangorest
      dockerfile: Dockerfile
    container_name: djangorest
    ports:
      - "8002:8002"
    env_file:
      - .env
    depends_on:
      - redis
      - minio
      - rabbitmq
    volumes:
      - ./djangorest:/app
      - ./db:/app/db
    networks:
      - net

  redis:
    image: redis:7.2
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - net

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${AWS_ACCESS_KEY_ID}
      - MINIO_ROOT_PASSWORD=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - net

  rabbitmq:
    image: rabbitmq:3.13-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=net_user
      - RABBITMQ_DEFAULT_PASS=rabbit_2025
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - net

  celery:
    build:
      context: ./fastapi
      dockerfile: Dockerfile
    container_name: celery
    command: celery -A celery_config worker --loglevel=info
    env_file:
      - .env
    depends_on:
      - redis
      - rabbitmq
    volumes:
      - ./fastapi:/app
    networks:
      - net

  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
    networks:
      - net

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/conf/grafana.ini:/etc/grafana/grafana.ini
    depends_on:
      - loki
    networks:
      - net

  tesseract:
    image: tesseractshadow/tesseract4re
    container_name: tesseract
    networks:
      - net

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    ports:
      - "9002:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - net

volumes:
  redis_data:
  minio_data:
  rabbitmq_data:
  loki_data:
  grafana_data:
  portainer_data:

networks:
  net:
    driver: bridge
    name: net
