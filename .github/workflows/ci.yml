name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  setup_and_test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: net_user
          POSTGRES_PASSWORD: password_2025
          POSTGRES_DB: net_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      rabbitmq:
        image: rabbitmq:3.13-management
        env:
          RABBITMQ_DEFAULT_USER: net_user
          RABBITMQ_DEFAULT_PASS: rabbit_2025
        ports:
          - 5672:5672
          - 15672:15672
        options: --health-cmd rabbitmqctl status --health-interval 10s --health-timeout 5s --health-retries 5
      minio:
        image: minio/minio:latest
        env:
          MINIO_ROOT_USER: ${{ secrets.AWS_ACCESS_KEY_ID }}
          MINIO_ROOT_PASSWORD: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        ports:
          - 9000:9000
          - 9001:9001
        command: server /data --console-address ":9001"
        options: --health-cmd "curl http://localhost:9000" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          cd fastapi && pip install -r requirements.txt
          cd ../djangocore && pip install -r requirements.txt
          cd ../djangorest && pip install -r requirements.txt
          sudo apt-get update && sudo apt-get install -y tesseract-ocr

      - name: Run FastAPI
        run: |
          cd fastapi
          uvicorn main:app --host 0.0.0.0 --port 8000 &
          sleep 5  # Дать время на запуск

      - name: Run DjangoCore
        run: |
          cd djangocore
          python manage.py migrate
          python manage.py runserver 0.0.0.0:8001 &
          sleep 5

      - name: Run DjangoRest
        run: |
          cd djangorest
          python manage.py migrate
          python manage.py runserver 0.0.0.0:8002 &
          sleep 5

      - name: Run tests for FastAPI
        run: |
          cd fastapi
          python -m pytest
        env:
          CELERY_BROKER_URL: amqp://net_user:rabbit_2025@localhost:5672//
          CELERY_RESULT_BACKEND: redis://localhost:6379/0
          S3_URL: http://localhost:9000
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_STORAGE_BUCKET_NAME: mybucket
          CORE_URL: http://localhost:8001
          REST_URL: http://localhost:8002

      - name: Run tests for DjangoCore
        run: |
          cd djangocore
          python manage.py test
        env:
          CELERY_BROKER_URL: amqp://net_user:rabbit_2025@localhost:5672//
          CELERY_RESULT_BACKEND: redis://localhost:6379/0
          S3_URL: http://localhost:9000
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_STORAGE_BUCKET_NAME: mybucket
          CORE_URL: http://localhost:8001
          REST_URL: http://localhost:8002

      - name: Run tests for DjangoRest
        run: |
          cd djangorest
          python manage.py test
        env:
          CELERY_BROKER_URL: amqp://net_user:rabbit_2025@localhost:5672//
          CELERY_RESULT_BACKEND: redis://localhost:6379/0
          S3_URL: http://localhost:9000
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_STORAGE_BUCKET_NAME: mybucket
          CORE_URL: http://localhost:8001
          REST_URL: http://localhost:8002

      - name: Stop services
        if: always()
        run: |
          pkill -f uvicorn
          pkill -f runserver
