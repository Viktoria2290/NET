name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  setup_services:
    runs-on: ubuntu-latest
    services:
      fastapi:
        image: my-fastapi-image:latest  # Замени на реальный образ или настрой build
        ports:
          - 8000:8000
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        volumes:
          - /github/workspace/fastapi:/app
          - /github/workspace/db:/app/db
      djangocore:
        image: my-djangocore-image:latest  # Замени на реальный образ или настрой build
        ports:
          - 8001:8001
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        volumes:
          - /github/workspace/djangocore:/app
          - /github/workspace/db:/app/db
      djangorest:
        image: my-djangorest-image:latest  # Замени на реальный образ или настрой build
        ports:
          - 8002:8002
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        volumes:
          - /github/workspace/djangorest:/app
          - /github/workspace/db:/app/db
      redis:
        image: redis:7.2
        ports:
          - 6379:6379
        volumes:
          - redis_data:/data
      minio:
        image: minio/minio:latest
        ports:
          - 9000:9000
          - 9001:9001
        env:
          MINIO_ROOT_USER: ${{ secrets.AWS_ACCESS_KEY_ID }}
          MINIO_ROOT_PASSWORD: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        volumes:
          - minio_data:/data
        command: server /data --console-address ":9001"
      rabbitmq:
        image: rabbitmq:3.13-management
        ports:
          - 5672:5672
          - 15672:15672
        env:
          RABBITMQ_DEFAULT_USER: net_user
          RABBITMQ_DEFAULT_PASS: rabbit_2025
        volumes:
          - rabbitmq_data:/var/lib/rabbitmq
      celery:
        image: my-celery-image:latest  # Замени на реальный образ или настрой build
        command: celery -A celery_config worker --loglevel=info
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        volumes:
          - /github/workspace/fastapi:/app
      loki:
        image: grafana/loki:latest
        ports:
          - 3100:3100
        volumes:
          - loki_data:/loki
      grafana:
        image: grafana/grafana:latest
        ports:
          - 3000:3000
        volumes:
          - grafana_data:/var/lib/grafana
          - /github/workspace/grafana/provisioning:/etc/grafana/provisioning
          - /github/workspace/grafana/conf/grafana.ini:/etc/grafana/grafana.ini
        env:
          GF_AUTH_ANONYMOUS_ENABLED: true
      tesseract:
        image: tesseractshadow/tesseract4re
      portainer:
        image: portainer/portainer-ce:latest
        ports:
          - 9002:9000
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
          - portainer_data:/data
    steps:
      - run: echo "All services started"

  docs_test:
    runs-on: ubuntu-latest
    needs: setup_services
    services:
      redis:
        image: redis:7.2
        ports:
          - 6379:6379
      minio:
        image: minio/minio:latest
        ports:
          - 9000:9000
        env:
          MINIO_ROOT_USER: ${{ secrets.AWS_ACCESS_KEY_ID }}
          MINIO_ROOT_PASSWORD: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      rabbitmq:
        image: rabbitmq:3.13-management
        ports:
          - 5672:5672
      djangocore:
        image: my-djangocore-image:latest
        ports:
          - 8001:8001
      djangorest:
        image: my-djangorest-image:latest
        ports:
          - 8002:8002
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: |
          cd djangocore
          pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run tests for docs
        run: |
          cd djangocore
          python manage.py test
        env:
          CELERY_BROKER_URL: amqp://net_user:rabbit_2025@localhost:5672//
          CELERY_RESULT_BACKEND: redis://localhost:6379/0
          S3_URL: http://localhost:9000
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_STORAGE_BUCKET_NAME: mybucket
          CORE_URL: http://localhost:8001
          REST_URL: http://localhost:8002

  logger_test:
    runs-on: ubuntu-latest
    needs: setup_services
    services:
      redis:
        image: redis:7.2
        ports:
          - 6379:6379
      minio:
        image: minio/minio:latest
        ports:
          - 9000:9000
        env:
          MINIO_ROOT_USER: ${{ secrets.AWS_ACCESS_KEY_ID }}
          MINIO_ROOT_PASSWORD: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      rabbitmq:
        image: rabbitmq:3.13-management
        ports:
          - 5672:5672
      djangocore:
        image: my-djangocore-image:latest
        ports:
          - 8001:8001
      djangorest:
        image: my-djangorest-image:latest
        ports:
          - 8002:8002
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: |
          cd djangorest
          pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run tests for logger
        run: |
          cd djangorest
          python manage.py test
        env:
          CELERY_BROKER_URL: amqp://net_user:rabbit_2025@localhost:5672//
          CELERY_RESULT_BACKEND: redis://localhost:6379/0
          S3_URL: http://localhost:9000
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_STORAGE_BUCKET_NAME: mybucket
          CORE_URL: http://localhost:8001
          REST_URL: http://localhost:8002

  fastapi_run:
    runs-on: ubuntu-latest
    needs: setup_services
    services:
      redis:
        image: redis:7.2
        ports:
          - 6379:6379
      minio:
        image: minio/minio:latest
        ports:
          - 9000:9000
        env:
          MINIO_ROOT_USER: ${{ secrets.AWS_ACCESS_KEY_ID }}
          MINIO_ROOT_PASSWORD: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      rabbitmq:
        image: rabbitmq:3.13-management
        ports:
          - 5672:5672
      djangocore:
        image: my-djangocore-image:latest
        ports:
          - 8001:8001
      djangorest:
        image: my-djangorest-image:latest
        ports:
          - 8002:8002
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: |
          cd fastapi
          pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run FastAPI
        run: |
          cd fastapi
          uvicorn main:app --host 0.0.0.0 --port 8000
        env:
          CELERY_BROKER_URL: amqp://net_user:rabbit_2025@localhost:5672//
          CELERY_RESULT_BACKEND: redis://localhost:6379/0
          S3_URL: http://localhost:9000
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_STORAGE_BUCKET_NAME: mybucket
          CORE_URL: http://localhost:8001
          REST_URL: http://localhost:8002
